// Code generated by go-bindata.
// sources:
// asset/bindata.go
// asset/templates/thread.html
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_assetBindataGo,
		"asset/bindata.go",
	)
}

func assetBindataGo() (*asset, error) {
	bytes, err := assetBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1446418889, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetTemplatesThreadHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\x59\x73\xdb\x38\xf2\x7f\x9f\x4f\x81\xa1\xa7\xe2\x64\x4a\x97\x1d\xd9\xf1\xa9\xa9\x38\x47\xcd\xfc\xff\xb9\x2a\xf6\x4e\x76\x6a\x2b\xe5\x02\x49\x48\x44\x4c\x02\x1c\x00\x94\xac\xb8\xf4\xdd\xb7\x1b\x20\x29\x92\xa2\xe4\x63\xe2\x87\x7d\x48\x4c\xe2\xe8\x6e\xf4\xf9\x6b\x50\x37\x37\x21\x1b\x73\xc1\x88\x67\x22\xc5\x68\xe8\x2d\x16\x3f\x9d\xfc\xfc\xfa\xe3\xab\x8b\xbf\x3e\xbd\x21\x91\x49\xe2\xd1\x4f\x27\xee\x0f\x21\x27\x11\xac\xc0\x07\x78\x4c\x98\xa1\x24\x88\xa8\xd2\xcc\x9c\x7a\x99\x19\x77\x0f\xbc\xea\x94\xa0\x09\x3b\xf5\x94\xf4\xa5\xd1\x1e\x09\xa4\x30\x4c\xc0\x42\x21\xa9\x0a\x22\x3e\x65\x2d\x8b\x43\xa6\x03\xc5\x53\xc3\xa5\xa8\xec\x78\x9b\x05\x57\x04\xe6\x15\x0f\xa8\xd0\x1d\xc2\xa6\x4c\x10\xaa\xa8\xaf\xe1\x7f\x46\x74\x96\xc2\x94\x54\xb0\x21\x49\x61\x20\x24\x46\x12\x13\x31\x12\xf2\x84\xcc\xb8\x31\x30\x32\xa3\xda\x30\x22\xc7\x84\x09\xa6\x26\xf3\x0e\x99\x64\x82\xa4\x52\x09\x12\xcb\x29\x17\x93\x4e\xaf\xd7\x23\x5d\xf2\xe4\xef\x4c\x9a\xe3\xfe\xcd\x4d\xef\x0c\xa4\x0c\x17\x8b\x3e\x0c\x7e\xa6\x22\x94\x89\x9b\x22\x5c\x5b\xd2\x3e\x57\x26\x4a\x63\x1a\x58\xa2\x2f\x85\x14\xf3\x44\x66\x20\x1b\xac\x25\xb3\x88\x81\x58\x29\x93\x69\xcc\xc8\x44\xa2\x38\x21\xd7\x41\xa6\x35\x51\x96\x16\x8c\xa4\x3c\xd0\x76\x71\x00\x3a\x07\xd1\x12\x96\x30\x4d\xa4\x20\x43\xd0\xa8\xe8\xb5\xe8\xe6\x8a\xcd\x67\x52\x85\x55\x55\xf2\x84\x4e\x98\x8f\x92\x76\x60\xea\x4a\xd3\x31\xeb\xd0\x52\x16\xc7\xab\x63\x29\x77\x50\x87\x9d\xa5\x0e\x51\x85\x1d\xab\xc2\x4e\xa1\xbe\x4e\xa1\xbe\x8e\xd3\x59\xc7\xea\xac\x93\x2b\x0c\x75\xd5\x71\xba\x6a\x33\x32\x1b\x33\xa5\x98\xaa\xc8\x26\x15\x9f\x70\xd1\xb2\x76\xca\xd9\x0c\xa8\x99\xca\xda\x19\x0f\x4d\x74\x1a\xb2\x29\x0f\x58\xd7\xbe\x74\xb8\xe0\x86\xd3\xb8\xab\x03\x1a\xb3\xd3\x9d\x82\x4e\xcc\xc5\x15\x51\x2c\x3e\xf5\x74\x04\x34\x82\xcc\x10\x1e\xa0\xb3\x80\xeb\x8e\x4f\xbd\x7e\x5f\xf7\x86\x41\x28\x7a\x52\x4d\xfa\x56\x3b\xfd\x31\x9d\xe2\x8a\x1e\xfc\xd7\x42\xc4\xcc\x63\xa6\x23\xc6\x40\x1a\xc3\x0d\x70\xf2\x34\x9c\x3e\x88\x5a\x09\x06\x5a\xf7\xe7\xe0\xcc\x99\x4f\x05\x9b\xf5\xf6\x77\x0f\x7b\x30\xb4\x4a\x95\xc6\x86\x29\x81\x56\xad\xd2\xb7\xcf\xa7\x9e\x61\xd7\x06\x29\xdd\x87\x43\x21\xdb\x5f\x6e\x8a\x7c\x60\xb3\xc7\xe1\x1a\x67\x6c\x13\xdf\xb3\xc7\xe0\x3c\xce\x0c\x6d\x3f\xee\x5b\x3b\xf3\x18\x3c\xfd\x0c\xe2\x00\xe2\xac\x8d\xeb\x59\x3e\xf7\x18\x7c\xd3\x48\x1a\xf0\xc5\x26\xcb\x4f\x76\xf8\x47\x33\x33\x32\x91\x4a\xc9\xd5\x13\x5e\xe4\x13\x9b\xe3\x61\xb3\x7b\x26\xd2\xe7\x31\x5b\x1f\x03\x01\xe6\x21\xc8\x35\x71\x41\x28\x32\x26\x3d\xea\xf7\x6d\xb6\x42\x92\x98\xe5\x90\x66\x25\xd7\xba\xfa\xd3\xdf\x1f\x1e\xee\x1e\xec\xef\x1f\x0c\xc1\x35\x82\xab\x6e\x99\xb4\xba\x98\xb4\xba\x36\x69\xc1\xff\xac\x5b\x24\xae\x6e\x91\xb8\x0a\x29\xec\x31\x47\x8d\x2c\x7e\xff\x22\x52\xa6\x7e\x78\x00\x5a\xaf\x40\xe2\xc5\x02\xe5\x3e\xe9\x3b\x0e\x8e\x9b\xab\x58\xc4\xcc\xd3\xc2\x28\xdf\xe8\x94\xba\x51\x6f\x34\xa5\x8a\x38\x8b\x5d\x4e\x94\xcc\x52\x72\x4a\x3c\x31\xd3\x97\x76\xc8\xeb\x10\x02\xda\xfb\x93\x29\x0d\x15\x0f\xa6\x40\x9d\x30\xf4\xad\x32\xb2\x33\xd8\xd9\xc5\x55\x32\x89\x19\xbe\xef\x0e\x06\x03\x78\x4f\xe8\xf5\x5b\xd0\xbf\xe6\xdf\x19\x0c\x0e\x77\x0e\x87\xcf\x07\x43\x37\xfe\x0e\x6a\xb9\x86\xc1\x3d\x5c\x37\x86\x45\x97\x46\xca\x4b\x9f\x4f\x90\xf5\x1b\xb0\xbb\x3a\x22\xef\xe9\x35\x4f\xb2\xc4\x4e\x13\x4b\x84\xc6\xb1\x9c\xc1\xa9\xa1\xbe\x0d\x07\x87\xfb\xe4\xff\xcf\x7a\x56\xba\x98\x07\x57\xd4\x07\x22\x3c\x44\xa2\x3b\x56\x16\x19\x87\x72\x26\xf0\xfd\xa6\x00\x0d\x47\xfb\x83\x0e\x94\x81\x34\x9e\x7b\x47\x3b\x7b\x1d\x57\x9a\xdc\xa3\x1d\xbd\xe4\xc2\x28\x5a\x99\x5b\x0e\x2c\x8e\x51\x49\x99\xe0\x7f\x67\x30\x9a\x22\xd9\x5d\x3b\x04\x87\xf9\xc2\xfc\xa4\x72\xd0\xe7\x3b\xc3\xbd\x17\xbb\x07\x76\x36\x88\x58\x70\x75\x39\x96\xea\xd2\x8f\x25\xd8\x16\x84\x3b\x26\xf6\xf1\x53\xcc\x28\xbc\x6e\xe3\x5f\xcd\x4e\x00\xa4\xc4\x54\x6b\x08\xa7\x34\x16\x57\x4b\xc7\x9e\xcd\x66\x15\x3f\x84\x54\xa0\x7f\x03\x2d\x6c\xed\x0c\x0e\x21\x52\xa8\x9a\x20\xaa\x01\xda\x14\xf6\x8c\xc0\x3d\xb0\x66\xb9\xea\x7c\xd2\xa7\x23\xe2\xcf\xb1\xa8\x83\x6a\xa0\x22\x92\xb9\xcc\x14\xa1\xa1\x63\xcf\x14\xd6\xf1\x5f\x2b\xb4\x7f\xed\xac\x11\x02\x83\x42\x1f\x35\x45\xa1\xe1\x94\x29\xc3\x35\xfb\x4d\xb3\x78\xac\x99\x02\xac\xb4\x22\x51\x9a\x01\x8a\xa2\x1a\xb9\x53\x82\xeb\xba\x76\x21\x48\x81\xe2\x75\x88\x54\xf7\xe2\x99\x52\x9b\x20\x1a\x4c\xfc\x6c\xee\x18\xd8\x85\xe4\x13\x2c\x42\xea\xbd\xed\x63\xe7\xfb\x7d\xe7\xe6\x77\x89\x04\x12\x52\x43\xbb\xc1\x98\xea\xb9\x08\x4e\xbd\x31\x8d\x35\x9c\x4a\xab\xa0\x91\x63\xbe\xe9\x7e\x20\x15\xeb\x25\x5c\xf4\x0e\x0f\xf7\x7a\xdf\xca\xe4\xf2\x38\xcc\x60\x27\x13\x18\x6c\x96\xe3\xce\x60\x77\xf7\x61\x2c\x47\x88\x58\x5e\x86\xfa\xe9\x36\x84\xf7\x76\x87\x6c\xfb\xdb\xcf\x5a\xb5\x24\x64\x9d\x28\x26\x82\x2a\x4d\x9b\x4e\xb7\x52\xa9\xcd\x5b\xa9\x92\x1b\x70\x32\xc0\x99\xf3\x23\x83\x51\xf8\x33\x4f\xd0\x0d\xa9\x30\xc7\x8b\xad\x49\x57\xb1\x80\xa6\x80\x56\x68\xb9\x0a\x92\x2e\x3b\x5e\x14\x6c\x91\x74\x71\x92\x2a\xdb\x93\x7e\x01\xe3\x4f\x7c\x19\xce\x0b\x37\xb1\xb9\xf9\xd2\x2f\x0e\xaf\x53\x30\x39\x0f\x01\x66\x86\x97\x95\x1c\xdf\xc7\xf1\xfc\x39\xe4\x53\xbb\xc2\xee\xfc\x40\xa7\xaf\x99\xbe\x02\x6c\xeb\x15\x14\xc3\xfc\xdd\x2d\x2f\x68\x56\xd9\xbd\xe3\x1a\x74\xf7\x9f\x9b\x1b\x40\xab\x13\x46\x7e\xe1\x1d\xf2\x0b\x23\x47\xa7\xc4\xe5\x6e\xbd\x58\xdc\xdc\xf0\x31\x99\x18\x98\x22\x83\xc5\x82\xf4\x21\x17\x33\x01\x49\x1d\xdc\x3b\x8f\xe4\x21\xa4\xfa\x5f\x58\x91\xec\xcb\x32\x67\x07\x2f\xf0\x19\x06\x47\xd5\x25\xe8\xc3\x39\x95\xaf\xd5\xf3\x54\x0f\x2d\xe8\x14\x24\x07\x10\x1b\xa1\x7c\xf9\x34\x2c\x28\xb8\x2e\x4d\x7f\x34\x95\x3c\x7c\x3a\x78\x76\xec\xd9\x8d\xd0\x0d\x19\x08\x1a\xfd\x85\x43\xed\x98\x41\x36\x86\x38\x3a\xcf\xc7\x96\x64\x40\x82\xaf\xa4\x85\x6c\x33\x2e\x2b\x31\x69\x15\xf9\xbb\x4c\x58\x9d\x4a\x21\x79\xd5\x2e\x7d\x30\xcc\x1a\x13\xbd\xb7\x85\xbb\xb4\x90\xab\xe3\x4b\x03\xe1\xf2\xaa\x7d\xce\x59\xcc\x02\x53\xce\x5b\x87\x55\x52\x4c\x46\x56\x95\x15\x49\xf2\xe1\xca\x3a\xbb\x73\xc9\xdb\x51\x7a\x5f\xe7\x67\x77\xda\x89\x52\x82\xa5\xec\x75\x71\x52\x28\x1a\xff\x97\x25\x69\x75\x6f\xa1\xb5\x2d\xe8\x31\x01\xee\x78\xa3\x27\x5b\x87\xfb\xfb\x83\xe3\x9a\x86\xfe\x91\xed\x0a\x79\x5b\x2d\x78\xab\xf9\x6e\xb5\xde\xea\xa1\x9b\xb6\xab\x1a\xe3\x0c\x11\xab\xaa\x1b\xcb\xea\xd7\x8e\xbf\x12\xa6\x34\xab\x0d\x01\x52\x84\x9f\x4b\x87\x36\xfd\xed\xec\x3d\xef\xa5\x65\x0f\xb7\x41\xdd\x96\xa1\x8d\x1e\xaf\x09\xa5\x1c\x2a\xda\xbc\xf3\x3c\xf3\x8d\xdb\x7c\x11\x21\x7c\x85\x76\x90\xb9\x86\x97\x0b\xa8\xd9\x09\xc5\x1e\x9f\x60\x96\x03\xd0\x61\xfb\x65\x6a\xff\x41\xd9\x33\x3c\x20\xb6\x9d\xc5\xd6\x7a\xcc\x03\xbb\x12\x77\xda\x34\x1e\x49\x19\xf6\x96\x3a\xf4\xd5\xe8\xa3\x88\xe7\x50\xa2\xc6\x00\x4b\x60\x5f\x16\x03\x74\xa3\x57\x40\x4b\xcc\x4d\x84\xd5\xab\xc6\x44\x03\x95\xc0\xf4\xee\xac\x77\x48\x03\xe8\x06\x9a\x34\x03\xa5\x9a\xc9\xdc\x1c\xf7\x89\x9f\x99\x25\x90\xaf\x3b\x46\x89\x20\xab\xca\xf4\x08\x0d\x02\xa6\x35\xf4\xf6\x50\xa5\xbd\xd1\x67\x66\x32\x25\xda\x3d\x64\x35\x4d\xdd\x9d\x7b\x19\x1f\x67\xf6\xef\x23\x30\x00\x37\xbb\x54\x2e\x88\x60\x40\x41\x13\xe1\x3c\xfe\xb3\x7b\xb9\x8d\x63\x53\xfb\xae\xc7\xd9\x06\xd3\x71\x34\xff\x11\xf4\x14\xe0\x31\x53\xb6\xbd\xb2\xbc\x6e\xae\x84\x87\x21\xa0\xbe\x90\x04\x4c\x40\xef\x04\x68\xa8\x1b\x88\x5a\xfa\x2a\x62\x86\x7e\xbf\x3a\x3c\x38\x38\x78\x51\x4b\x45\x55\xaa\xb5\x97\x48\x95\x8f\xe5\x91\xcb\x60\x73\x6a\x81\xbe\x27\x3c\x73\x4f\x4e\x61\x24\x02\x61\x98\x70\x4a\x99\xc4\xd2\xa7\xf1\x85\x9c\x4c\xd0\x89\xfe\xe4\x6c\x46\x5e\x0a\x21\x33\x11\xb0\x04\x44\xfd\x69\x55\x3b\x95\x53\xb9\xcd\xef\xc1\x51\x20\x07\x22\x59\x56\x64\xf1\x25\xe9\x7c\x36\x8f\xf5\xcc\x60\xac\x0f\x87\xfb\x3b\x7b\xc3\x17\xfb\x03\x6f\xf4\x97\xcc\x48\x82\xc5\x8c\xc4\x1c\x82\x83\x9b\xde\xaa\x11\xab\xc8\x10\x10\xad\xc9\x7c\xd6\x83\xc6\xa3\x3f\xa3\x80\x31\x7e\x9b\x9e\x4e\xff\xad\xba\xbb\xd1\xec\xe2\x6a\xef\xa0\x4c\x6c\x0e\x29\x8e\x3c\x8c\xf2\x3f\x50\xe5\x82\x99\x6d\x4d\x3e\xce\x04\x39\x93\xf3\x23\x82\xe3\xe7\x10\xfd\x73\x7b\x4f\x46\xa1\x46\x90\xf3\x19\x84\xf9\x77\xef\x96\x3c\x68\x95\xde\xc4\x11\xf6\xbc\x55\x3c\xd1\x16\xa9\x25\xe8\x68\x2b\xaf\x0f\x0d\xc3\xd6\x62\xbd\x29\xac\xbe\xde\xe6\x47\x98\x05\xcb\x6b\xcf\x18\xdf\xdc\xf1\xca\x17\x6a\x33\xdf\xd2\x2c\x7a\xbe\xa6\x6f\xe6\xc9\xc4\xe6\xdc\x5e\x1a\x81\x8a\x12\x66\x22\x09\x74\x30\xed\x35\x1d\xbf\x9a\xa1\x2b\x73\xf5\xd9\xbc\xa3\xb3\xc2\x18\x60\xf3\x41\x22\x7e\xaa\x2c\x26\xa4\x80\x6b\xbd\x4f\xc0\x04\x30\x5a\x6d\xb2\x51\xb6\x61\xc5\x2b\x29\x0c\x85\xb6\x54\x11\x0b\xe6\x7a\x1f\xd3\xc5\x42\xa6\xe5\x28\x40\x31\x48\xec\x8b\x85\x6d\x14\xab\xa3\xc2\xc2\x39\x94\x23\x0d\xda\x05\x69\x72\xd3\x10\x1b\x2f\xf1\x6e\x43\xe7\x05\x9d\x96\xfb\x9e\x4c\xcc\x31\xfe\xab\x19\xa4\x41\xc5\xb2\x2a\x76\x54\x4f\x50\x13\xbc\x26\x6f\x21\xe6\x2a\xc5\x55\x3d\xfc\x01\xa5\xef\x7d\x51\x49\x1c\x33\x9e\xd8\xeb\x8e\x17\xbb\x83\xbd\x56\x12\x8d\x54\x8c\xfe\x72\x86\x4d\xe6\x9a\xc5\x2d\xcb\x11\xfa\xf6\x3e\xc0\x03\xe2\x5e\x9b\x71\xb1\x68\xb6\xb3\xaa\xd5\x80\x0d\x74\x21\xc7\xb0\x0b\x9e\x30\x5b\x5b\x3f\x64\x49\x35\xeb\x00\x37\x9c\x72\x98\x1b\x34\x39\xab\x40\xf5\xad\xa5\x72\x73\x90\x8e\x21\xeb\xee\xeb\xb9\x26\xce\x65\x3f\xc8\x1e\x06\x50\x1b\x5a\xc3\x3b\x78\xf6\x74\x3b\x27\xb2\x8d\xb0\x2d\xa7\xf3\x19\x6d\xd1\x20\x94\x2f\xb3\xc4\xd6\x9e\x6c\x8d\x3b\xb4\x1b\x8f\xd4\x12\x51\xca\xd7\x3b\xa5\xa5\xc0\x45\x9a\x15\xfd\xa2\xbd\xae\xf0\xe5\xb5\x97\xc7\x7c\xa9\x88\x29\x8d\x33\x97\x03\x98\x61\xf7\xf4\x81\xbb\x18\xfb\xbe\x36\xbd\xcd\x96\x77\xa5\x97\xbb\xc6\x32\x1d\xff\x4f\x7a\x81\x8b\x7b\xbc\x82\x12\x56\xab\xb7\x38\xca\xb8\x8c\xec\xf1\x2d\xbe\xd1\xd8\x74\x01\xad\x7f\xbe\xf1\x02\x32\xc2\x73\xc0\xe9\x43\xc0\x26\xc8\xf8\xa8\x52\xbe\x70\x69\xdf\x59\x05\x3b\xe3\xde\x9b\x6b\x63\xd5\xd8\xb8\xb7\x81\x99\xa5\xc8\xc5\x32\x7b\x6d\xf5\x14\xa7\xce\xf9\x77\xf6\x49\x41\x47\x33\x5f\x2c\x3a\x78\xb7\xf9\x65\xb1\xb8\x86\x3f\xbf\x2f\x16\xcf\xd6\x24\x86\x35\xea\xb1\xc5\xb0\x7a\x8c\x28\x4b\x7c\xef\x9e\xd2\xae\xcb\x64\x50\xd7\xf2\x3b\x9b\x35\x84\x68\x6c\xac\x8f\xd6\x0e\x94\xfb\x6f\x12\xee\xd9\xb9\xf7\xe1\x1e\x8e\xe5\x97\xe6\x11\x43\x0c\x74\x84\x67\xbe\x10\x70\xdc\xf4\xfa\x98\xd8\x0f\x4e\xf9\xd0\x17\x3b\xb4\x5e\x24\xb4\x9a\x25\x6f\x78\x7a\xea\x79\xe5\x73\x37\xf0\x01\x7c\x9e\x47\x72\xf6\x36\x8b\xe3\x65\x77\x8d\x56\xb0\x89\xa3\x68\x1f\x9a\xd2\x92\xe2\x34\xeb\x38\x6e\xd0\x7c\xb5\x03\xbd\xc3\x8e\xbc\x52\xb5\x6d\xb1\xf7\x96\x36\xac\xaa\xd1\x5b\x42\x4a\x74\xcb\xa4\xf4\x67\x84\x50\x32\x41\x7f\x5a\x6e\x6b\xa9\xa7\x6d\x62\xb4\x0c\xae\x4a\xb5\xb2\xa8\x82\x9a\xec\x6b\x1b\xe8\x2b\x1e\x00\x89\xb5\x01\x40\xbb\xef\x1f\x81\xc0\x42\xe3\x55\x20\x58\xa3\xba\x65\x59\x5e\xc8\x74\x75\xcb\x2d\x87\x5b\x77\x5b\xb6\xb2\xfa\x2e\x8d\xa9\x5d\x77\xb7\xee\xed\xc7\x29\xa5\x76\xc0\x66\x8e\x7d\x88\x34\xeb\x95\xf9\xe3\x59\x39\x10\xdf\xec\x5e\x0b\x68\xdf\x6c\x60\xef\x20\x47\xd3\x6a\x4b\x0b\xaf\xd8\xaa\x8e\xca\x91\xe3\x86\xde\xb5\xde\xbd\xee\x3d\x7f\xfe\xe2\xb0\x3e\xdb\xe0\xbb\x22\xc6\x26\xbe\xaf\x8c\x8a\xc9\xaa\x07\x36\x41\x82\x45\x29\xb6\x3f\x69\xa8\xb3\x8a\x75\x8a\xc6\xd7\x21\x9d\x44\x86\xac\x84\x39\x99\x56\x40\xc3\x1b\xbd\xb6\x84\x08\xf6\x0f\x47\x77\x25\x04\x76\x28\xe9\x94\x1f\x09\xbd\x51\x33\x20\x37\xa1\x2e\x29\xe2\x39\x94\x15\x14\xa1\xa0\x84\x9e\x81\x69\x9a\xe0\x3d\xd2\xd7\xdb\x65\xc9\x7b\x34\xfc\x16\x82\xbf\xc7\x28\x28\xa7\xb3\x70\x93\x4a\x74\xe6\x27\xdc\x94\x4c\x5f\xb7\xa1\xbd\x7c\x83\xbb\x31\x45\x9b\x00\x9c\x91\xca\x9c\x19\xe0\xea\xa8\xe4\x9e\x5c\x50\x71\xf3\xde\x3d\x62\xc2\x96\x41\xec\x21\x27\x78\x8f\x78\x8e\x6f\x0d\xf5\x57\xae\x6d\xed\x62\x77\x6d\x2b\xd5\x4a\x4d\x3c\x91\xf6\x77\x3a\x85\x2c\xb5\xdf\x26\xe4\x2f\x2b\xd9\xdf\x6d\xb9\x23\xa5\xb3\x1a\x2d\x72\xf6\x30\x6a\xd5\x1f\x11\xb8\xe7\x87\xd1\xa9\xff\x2c\xa0\x78\x7b\x18\xad\xe5\x07\xf8\xe2\xe9\x61\x74\x8a\xdf\x0d\xb8\xbf\x77\xa2\xd1\xbc\x6e\xcf\xc7\xd6\xe7\xaf\x93\x3e\x46\xfb\xca\x95\x33\xf5\x35\xf8\x68\x09\x74\xe0\x15\x2a\xaf\x05\xb1\xed\x49\x66\x6d\x95\xb2\xe1\x64\x3f\xa4\xb2\x6e\xb1\x68\x4d\x85\xad\xb4\x00\xf9\x0e\x77\x0d\xf6\x14\x3a\x80\xd1\x6b\x37\x42\xdc\x10\xb1\x37\x6c\x7d\xf2\x2f\xcd\x48\xfe\x51\x8a\x9c\x73\xc3\x36\xd6\x66\x42\x56\x3a\xe3\xc6\xc0\xba\xe8\xc2\x43\x00\xda\xbe\xdf\x19\xdc\x86\xca\x11\xde\x88\x35\x27\xc8\x47\x1e\xe1\x00\xcd\x1a\x51\xcd\x15\xce\xa6\xa0\x57\x78\x87\x26\x10\x32\xc0\x6b\x89\x3f\x46\x81\x7e\xc4\x1f\x7d\x79\xf9\xee\xdd\x9b\x0b\x80\x80\xb5\x2f\x39\x75\xda\x85\xaf\x8c\x25\x20\x44\xd5\xc5\x1f\x87\x68\x6f\xf4\xc4\x07\x84\x7c\x7c\xa7\x2f\x5e\x79\x7f\x80\x77\x88\x9f\x19\x8d\xc9\xd3\x37\x69\xc4\x40\x12\x1a\x3f\x23\xc3\x57\xc5\x97\x78\x47\x70\xc3\xe5\xed\xf2\x13\x98\x2b\xe9\xab\x8b\xe0\x1c\x32\x9c\xe3\xf3\x49\xdf\xfd\xd4\x31\x87\xa5\xff\x0d\x00\x00\xff\xff\x2b\x75\x44\xca\x1d\x29\x00\x00")

func assetTemplatesThreadHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetTemplatesThreadHtml,
		"asset/templates/thread.html",
	)
}

func assetTemplatesThreadHtml() (*asset, error) {
	bytes, err := assetTemplatesThreadHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset/templates/thread.html", size: 10525, mode: os.FileMode(420), modTime: time.Unix(1446418886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset/bindata.go": assetBindataGo,
	"asset/templates/thread.html": assetTemplatesThreadHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"asset": &bintree{nil, map[string]*bintree{
		"bindata.go": &bintree{assetBindataGo, map[string]*bintree{}},
		"templates": &bintree{nil, map[string]*bintree{
			"thread.html": &bintree{assetTemplatesThreadHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

